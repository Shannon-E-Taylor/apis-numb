{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from reportlab.lib import colors\n",
    "from reportlab.lib.units import cm\n",
    "from Bio.Graphics import GenomeDiagram\n",
    "from Bio.SeqFeature import SeqFeature, FeatureLocation\n",
    "from Bio import SeqIO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "numb = SeqIO.read(\"sequence(1).gb\", \"genbank\")\n",
    "\n",
    "#initialise GenomeDiagram, FeatureSets \n",
    "n_diagram = GenomeDiagram.Diagram(\"NUMB\")\n",
    "track = n_diagram.new_track(1, name = \"Annotated features\", \n",
    "                           greytrack = False, start = 0, end = len(numb))\n",
    "CD_track = n_diagram.new_track(1, name = \"CD\", \n",
    "                           greytrack = False, start = 0, end = len(numb))\n",
    "#scrm_track = n_diagram.new_track(1, name = \"scrm\", \n",
    "#                           greytrack = False, start = 0, end = len(numb)) \n",
    "alignments_track = n_diagram.new_track(1, name = \"alignments\", \n",
    "                           greytrack = False, start = 0, end = len(numb)) \n",
    "\n",
    "feature_set = track.new_set()\n",
    "CD_feature_set = CD_track.new_set()\n",
    "#scrm_feature_set = scrm_track.new_set()\n",
    "alignments_feature_set = alignments_track.new_set()\n",
    "\n",
    "\n",
    "#add NUMB features to the first track \n",
    "for feature in numb.features: \n",
    "    if str(feature.location) == \"[0:60546](+)\": #filtering out stupid-long ones\n",
    "        continue\n",
    "    if feature.type == \"ncRNA\": \n",
    "        color = colors.green\n",
    "    else: \n",
    "        color = colors.lightblue\n",
    "    feature_set.add_feature(feature, color = color, label = False)\n",
    "\n",
    "#importing SuH data positive strand ClusterDraw line, RED     \n",
    "for record in SeqIO.parse(\"FINAL_seqs/SuH\", \"fasta\"): \n",
    "    start = numb.seq.find(record.seq)\n",
    "    index = FeatureLocation(start, start + len(record.seq))\n",
    "    ft = SeqFeature(index, strand = +1)\n",
    "    CD_feature_set.add_feature(ft, color = \"red\")\n",
    "    \n",
    "    \n",
    "#importing CLARE JASPAR data, BLUE    \n",
    "for record in SeqIO.parse(\"FINAL_seqs/JASPAR_CD\", \"fasta\"): \n",
    "    start = numb.seq.find(record.seq)\n",
    "    index = FeatureLocation(start, start + len(record.seq))\n",
    "    ft = SeqFeature(index, strand = -1)\n",
    "    CD_feature_set.add_feature(ft, color = \"blue\")    \n",
    "    \n",
    "#importing CLARE predicted motif data, green    \n",
    "for record in SeqIO.parse(\"FINAL_seqs/CLAREmotif\", \"fasta\"): \n",
    "    start = numb.seq.find(record.seq)\n",
    "    index = FeatureLocation(start, start + len(record.seq))\n",
    "    ft = SeqFeature(index, strand = -1)\n",
    "    CD_feature_set.add_feature(ft, color = \"green\") \n",
    "    \n",
    "#scrmshaw data: orange  \n",
    "for record in SeqIO.parse(\"FINAL_seqs/scrm.txt\", \"fasta\"): \n",
    "    start = numb.seq.find(record.seq)\n",
    "    if len(record) <= 10: #filter out stupid-short stuff\n",
    "        continue\n",
    "    if start == -1 or start == 0: \n",
    "        continue #filter out non-matches \n",
    "    index = FeatureLocation(start, start + len(record.seq))\n",
    "    ft = SeqFeature(index, strand = +1)\n",
    "    #print(index)\n",
    "    alignments_feature_set.add_feature(ft, color = \"orange\") \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Bio.Graphics.GenomeDiagram._Feature.Feature at 0x7fe6cf145e48>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#bombus terrestris\n",
    "f=open(\"alignments/B_terr/N0A2BE8S11N-Alignment-HitTable.csv\")\n",
    "for line in f: \n",
    "    record = line.split(\",\")\n",
    "    if len(record) ==1: \n",
    "        continue\n",
    "    start = len(numb.seq) - (int(record[9]) - 3252630)\n",
    "    stop = len(numb.seq) - (int(record[8]) - 3252630)\n",
    "    index = FeatureLocation(start, stop)\n",
    "    ft = SeqFeature(index, strand = +1)\n",
    "    alignments_feature_set.add_feature(ft, color = \"green\")\n",
    "f.close()\n",
    "\n",
    "    \n",
    "#bombus impatiens \n",
    "f = open(\"alignments/B_imp/N0CD76C9114-Alignment-HitTable.csv\")\n",
    "for line in f: \n",
    "    record = line.split(\",\")\n",
    "    if len(record) ==1: \n",
    "        continue\n",
    "    start = len(numb.seq) - (int(record[8]) - 3252630)\n",
    "    stop = len(numb.seq) - (int(record[9]) - 3252630)\n",
    "    index = FeatureLocation(start, stop)\n",
    "    ft = SeqFeature(index, strand = -1)\n",
    "    alignments_feature_set.add_feature(ft, color = \"yellow\")\n",
    "f.close()\n",
    "\n",
    "#ClusterBuster (manual entry)\n",
    "CD_feature_set.add_feature(SeqFeature(\n",
    "                            FeatureLocation(48336, 51720), strand = -1), \n",
    "                          color = \"purple\", alpha = 0.5)\n",
    "\n",
    "CD_feature_set.add_feature(SeqFeature(\n",
    "                            FeatureLocation(5512, 7518), strand = -1), \n",
    "                          color = \"purple\", alpha = 0.5)\n",
    "\n",
    "CD_feature_set.add_feature(SeqFeature(\n",
    "                            FeatureLocation(31937, 33290), strand = -1), \n",
    "                          color = \"purple\", alpha = 0.5)\n",
    "\n",
    "CD_feature_set.add_feature(SeqFeature(\n",
    "                            FeatureLocation(37351, 38234), strand = -1), \n",
    "                          color = \"purple\", alpha = 0.5)\n",
    "\n",
    "\n",
    "#for i in alignments_feature_set: \n",
    "#    print (i.locations)\n",
    "#print (len(numb.seq))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#write it out\n",
    "n_diagram.draw(format = \"linear\", orientation=\"landscape\",  \n",
    "              fragments = 1, start = 0, end = len(numb))\n",
    "n_diagram.write(\"numb.pdf\", \"pdf\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60546\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'/home/shannon/OneDrive/Honours/CRE prediction'"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print (len(numb.seq))\n",
    "import os\n",
    "os.getcwd()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
